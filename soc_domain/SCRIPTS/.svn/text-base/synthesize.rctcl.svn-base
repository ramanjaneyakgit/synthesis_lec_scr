#############################
# RC-Synthesis Script
#############################

echo "OS_INFO: Time(Start): [date]"
echo "OS_INFO: Sourcing Root-Level attributes"

set WORK_AREA [lpwd]
set RC_COMMON_INPUTS ${WORK_AREA}/INPUTS
set OUTPUTS_PATH ${WORK_AREA}/${DESIGN}/OUTPUTS
set REPORTS_PATH ${WORK_AREA}/${DESIGN}/REPORTS
set EDI_COMMON_SCRIPTS ${WORK_AREA}/EDI_SCRIPTS

source -v ${RC_COMMON_INPUTS}/user_attr_file.tcl
source -v ${RC_COMMON_SCRIPTS}/attributes.tcl
source -v ${RC_COMMON_SCRIPTS}/create_directory.tcl
source -v ${RC_COMMON_SCRIPTS}/report_generation.tcl		;# Customized Report Generation

echo "OS_INFO: Hostname : [info hostname]"

#================================
# User Variables Info
#================================

# Following settings are for debugging
applet load time_info
alias timestat $::ns(time_info)::time_info

set_attribute source_suspend_on_error true /
set_attribute tinfo_include_load true /

# To report detail breakup for Mapper Runtime
set show_runtime_report 1

# For debugging Purpose
set map_fancy_names 1 
set iopt_stats 1 
set check_targets 1 

echo "OS_INFO: DESIGN NAME: $DESIGN"
echo "OS_INFO: SYNTHESIS FLOW: $SYNTHESIS_FLOW"
echo "OS_INFO: COMMON SCRIPTS AREA: $RC_COMMON_SCRIPTS"
echo "OS_INFO: SYN::GENERIC EFFORT: $GEN_EFF"
echo "OS_INFO: SYN::MAP EFFORT: $MAP_EFF"
echo "OS_INFO: SYN::INCREMENENT EFFORT: $INC_EFF"
echo "OS_INFO: NUM_CPUS: $NUM_CPUS"

#================================
# Reading Libraries
#================================
echo "OS_INFO: Reading Libraries"

source ${RC_COMMON_SCRIPTS}/common_library_setup.tcl

check_library

global timing_libs
global power_libs

#====================================
# READING PHYSICAL LIBRARIES [LEF's]
#====================================

if {[regexp "PLE|RCP" $SYNTHESIS_FLOW]} {

	echo "OS_INFO: Reading Lef Files and Cap Tables For PLE FLOW"
	
	source ${RC_COMMON_INPUTS}/lef_cap_qrcTech_files.tcl
	set_attr lef_library $lef_files /
	set_attr cap_table_file $captables /
	set_attr qrc_tech_file $qrc_tech_file /

} 

# ---------------------
# Don't Use Cell List

echo "OS_INFO: Sourcing Dont Use list"
source ${RC_COMMON_INPUTS}/dont_use_cell_list.tcl

timestat RC_SETUP_DONE

#================================
# DESIGN ELABORATION
#================================
echo "OS_INFO: Reading RTL files and Elaborations"

source ${RC_COMMON_INPUTS}/rtl_filelist.tcl

set_attr hdl_search_path $hdl_search_path
source ${RC_COMMON_SCRIPTS}/read_rtlfiles.tcl

timestat RTL_READ

elaborate $DESIGN

timestat ELABORATED

#---------------
# RC Variables 

echo "OS_INFO: Sourcing RC Variables..."
source ${RC_COMMON_SCRIPTS}/rc_variables.tcl

#=====================================
# Timing Constraints
#=====================================
echo "OS_INFO: Reading Timing Constraints"

read_sdc $SDC($DESIGN)

timestat SDC_READ

#=======================================================
# Reading DEF and Decrypting PLE model
#=======================================================

if {[regexp "RCP|GEN_PLE" $SYNTHESIS_FLOW]} {

	echo "OS_INFO: Reading floorplan def of ${DESIGN}..."
	
	read_def $DEF($DESIGN)
	
	timestat READ_DEF

# ---------------------------------
# Sourcing RC Physical Attributes

source -v ${RC_COMMON_SCRIPTS}/attributes_physical.tcl

timestat SOURCED_RC_PHYSICAL_ATTRIBUTES
# ----------------------------------

	if {$GENERATE_PLE_MODEL_FILE == "yes"} {

		if {$USER_HAS_GENERATED_PLE_MODEL_FILE == "yes"} {

			echo "OS_INFO: USER has Already Generated PLE model file..."
			timestat USER_ALREADY_GENERATED_PLE_MODEL_FILE
			quit

		} elseif {[regexp "no" $USER_HAS_GENERATED_PLE_MODEL_FILE] & [regexp "" $USER_GENERATED_PLE_FILE]} {
			
			set ::phys::edi_mode_settings 1
	
			echo "OS_INFO: Generating PLE model file..."
			generate_ple_model $DESIGN -outfile ${DESIGN}_PLE_MODEL_FILE.etf
			report ple
			timestat GENERATED_PLE_MODEL_FILE
		
			if {[regexp "GEN_PLE" $SYNTHESIS_FLOW]} {	
			quit
			}

		} elseif {[llength $USER_GENERATED_PLE_FILE] != 0} {

			echo "OS_INFO: Decrypting PLE model file..."
			decrypt $USER_GENERATED_PLE_FILE
			report ple
			timestat READ_USER_GENERATED_PLE_MODEL_FILE

		} 
	
	}

} else {
		report ple
		timestat GLOBAL_PLE_MODEL
	}


#=============================================================
# Path Group Creation - 12R R2R R2O I2O TO_MEM FROM_MEM 
#=============================================================

source ${RC_COMMON_SCRIPTS}/path_group_creation.tcl

timestat PATH_GROUPS_CREATED

#=======================================
# To Report Initial Timing Reports
#=======================================

GEN_REPORTS $DESIGN INITIAL

timestat INITIAL

#=======================
# Synthesis - Generic
#=======================
echo "OS_INFO: Starting Synthesis - Generic Step"

synthesize -to_generic -eff $GEN_EFF

GEN_REPORTS $DESIGN GENERIC

timestat GENERIC

#===================
# READING VCD FILE
#===================

#read_vcd -vcd_scope gs_hash_test/top/logic_top/pipe_group0/pipe_0 /india/proj_FE/team/kirthie/guadalupe/SYN/PASS1_SYN_RECHECK/2013-09-15_10k_cycles_1p4GHz.vcd.gz -static -start 139190

#write_tcf > sha_top.tcf 

#=========================
# Synthesis - To Mapped
#=========================

echo "OS_INFO: Starting Synthesis - Mapping Step"

synthesize -to_clock_gated

timestat SYNTHESIZED_CLOCKGATES_ONLY

# ----------------------------------------------------
# To Check, Whether tool is hung during Mapping Stage, Use the below settings before and after Mapping command
# set_attr heartbeat 300

# Set Initial target , if you would like to focus on any Critical cost group
set_attr initial_target 0 [find / -cost REG2REG]

synthesize -to_mapped -eff $MAP_EFF -no_incr

#reset_attr heartbeat
# ----------------------------------------------------

GEN_REPORTS $DESIGN MAPPED

timestat MAPPED

#============================
# DFT RULE CHECK
#============================

check_dft_rules -max_print_violations -1 > ${REPORTS_PATH}/${DESIGN}_MAPPED_DFT_RULE_CHECK.rpt

identify_shift_register_scan_segments		;# To Report Functional Shift Registers

#=====================================
# To Preserve the Synthesised blocks
#=====================================

echo "OS_INFO: Preserving Modules... "

if {$BLOCKS_TO_BE_PRESERVED != ""} {

   foreach my_BLOCKS $BLOCKS_TO_BE_PRESERVED {

     set instance [filter subdesign /designs/${DESIGN}/subdesigns/${my_BLOCKS} [find /designs/${DESIGN}/* -inst *]]
     set num_of_instance [llength $instance]
     
	    if { $num_of_instance != 0} {
	            set_attr preserve true [filter subdesign /designs/${DESIGN}/subdesigns/${my_BLOCKS} [find /designs/${DESIGN}/* -inst *]]
	    }
    }
}

#==============================
# Synthesis - Incremental
#==============================

# ---------------------------------------------------------
# Use below, to debug runtime and stack trace Issue

#set_attr dump_stack_trace 1
#set_attr profile_output_filename INCR_PROFILE.html

echo "OS_INFO: Starting Synthesis - Incremental Step"

synthesize -to_mapped -eff $INC_EFF -incr

#set_attribute dump_stack_trace -1
#set_attribute profile_output_filename ""
# ---------------------------------------------------------

timestat INCREMENTAL

#============================
# Uniquifying the design
#============================

edit_netlist uniquify "/designs/$DESIGN" 

timestat UNIQUIFIED

#==============================================
# To Change Names of Instances/Sub-designs/Nets
#==============================================

# Uncomment the below line, if you are not able to change names due to instances being preserved
#set_attr preserve false [find /designs/eld_top/ -instance *] 

# Changing names for all intances [Subsituting '[/]' to '_'], to make it compatible for Encounter
change_names -instance -net -map {{"[" "_"} {"]" "_"}} -log_changes ./Changed_Names_Instances.rpt

# To Change the SubDesign name, use below
#change_names -subdesign -prefix "${DESIGN}_" -log_changes ./Changed_Names_SubDesign.rpt

timestat CHANGED_NAMES_INSTANCES

#=============================
# Changing Link for Instances
#=============================

# Use the below command, if you wanted to change all the Instances references to Single Module

#change_link -instance /designs/eld_top/instances_hier/core/instances_hier/GEN_HASH_CORE_PD_MACRO_19_U_hash_core_pd_macro  -design /designs/eld_top/subdesigns/hash_core_pd_macro

#===================================
# Generating Incremental Reports
#===================================

GEN_REPORTS $DESIGN INCREMENTAL

timestat DONE_GENERATING_INCR_REPORTS

#===================================
# Physical Synthesis
#===================================

if {$SYNTHESIS_FLOW == "RCP"} {

redirect EDI_TEMP.tcl "echo set DESIGN $DESIGN"

echo "OS_INFO: Starting Physical Synthesis..."

synthesize -to_placed -effort $PHY_EFFORT

timestat PHYSICAL_SYNTHESIS

GEN_REPORTS $DESIGN PHYSICAL

}

timestat EXIT

exit

#===============================


